#+TITLE: XMonad Config
#+AUTHOR: firman-qs
#+PROPERTY: header-args :tangle xmonad.hs
#+auto_tangle: t
#+STARTUP: showeverything

* TABLE OF CONTENTS :toc:
- [[#about][ABOUT]]
- [[#imports][IMPORTS]]
  - [[#disabled-import-may-usefull-later][Disabled import, may usefull later]]
- [[#variables][VARIABLES]]
  - [[#default-mod-key][Default Mod Key]]
  - [[#font][Font]]
  - [[#terminal][Terminal]]
  - [[#code-editor][Code Editor]]
  - [[#appearance][Appearance]]
- [[#autostart][AUTOSTART]]
- [[#scratchpads][SCRATCHPADS]]
- [[#layouts][LAYOUTS]]
- [[#workspaces][WORKSPACES]]
- [[#managehook][MANAGEHOOK]]
- [[#named-actions][NAMED ACTIONS]]
- [[#keybindings][KEYBINDINGS]]
- [[#xresrources][XRESROURCES]]
- [[#main-][MAIN 💥]]

* ABOUT
This is the xmonad window manager configuration of firman-qs. Originally, this was my old archlinux DTOS configuration, but now am on mint. I have tested on my mint and it works fine. For other distributions it should be the same, just complete the necessary packages. I’ll try to give a little guidance (TODO).

*Reference:* [[https://gitlab.com/dwt1][Derek Taylor-Distro.Tube]]
* IMPORTS
#+begin_src haskell
-- Base
import XMonad
import System.IO (hClose, hPutStr, hPutStrLn)
import System.Exit (exitSuccess)
import qualified XMonad.StackSet as W

-- Actions
import XMonad.Actions.CopyWindow (kill1)
import XMonad.Actions.CycleWS (Direction1D(..), moveTo, shiftTo, toggleWS, WSType(..), nextScreen, prevScreen)
import XMonad.Actions.MouseResize
import XMonad.Actions.Promote
import XMonad.Actions.RotSlaves (rotSlavesDown, rotAllDown)
import XMonad.Actions.WindowGo (runOrRaise)
import XMonad.Actions.WithAll (sinkAll, killAll)

-- Data
import Data.Char (isSpace, toUpper)
import Data.Maybe (fromJust, isJust, catMaybes, fromMaybe)
import Data.Monoid
import qualified Data.Map as M

-- xresrouces
import Data.Bifunctor (bimap, second)
import Data.List as DL
import System.IO.Unsafe (unsafePerformIO)
import XMonad.Core (installSignalHandlers)

-- Hooks
import XMonad.Hooks.DynamicLog
import XMonad.Hooks.EwmhDesktops  -- for some fullscreen events, also for xcomposite in obs.
import XMonad.Hooks.ManageDocks (avoidStruts, docks, manageDocks, ToggleStruts(..))
import XMonad.Hooks.ManageHelpers (isFullscreen, doFullFloat, doCenterFloat)
-- import XMonad.Hooks.StatusBar
-- import XMonad.Hooks.StatusBar.PP

-- Layouts
import XMonad.Layout.SimplestFloat
import XMonad.Layout.ResizableTile
import XMonad.Layout.Tabbed
import XMonad.Layout.ThreeColumns
import XMonad.Layout.Magnifier (magnifiercz)

-- Layouts modifiers
import XMonad.Layout.LayoutModifier
import XMonad.Layout.LimitWindows (limitWindows, increaseLimit, decreaseLimit)
import XMonad.Layout.MultiToggle (mkToggle, single, EOT(EOT), (??))
import XMonad.Layout.MultiToggle.Instances (StdTransformers(NBFULL, MIRROR, NOBORDERS))
import qualified XMonad.Layout.ToggleLayouts as T (toggleLayouts, ToggleLayout(Toggle))
import qualified XMonad.Layout.MultiToggle as MT (Toggle(..))
import XMonad.Layout.NoBorders (noBorders, smartBorders, withBorder)
import XMonad.Layout.Renamed (renamed, Rename(Replace))
import XMonad.Layout.Spacing (smartSpacing, decWindowSpacing, incWindowSpacing, decScreenSpacing, incScreenSpacing)

-- Utilities
import XMonad.Util.EZConfig (additionalKeysP, mkNamedKeymap)
-- import XMonad.Util.Hacks (windowedFullscreenFixEventHook, javaHack)
import XMonad.Util.NamedActions
import XMonad.Util.Run (runProcessWithInput, safeSpawn, spawnPipe)
import XMonad.Util.SpawnOnce
#+end_src
** Disabled import, may usefull later
#+begin_src haskell :tangle no
-- Data
-- import Data.Tree

-- Hooks
-- import XMonad.Hooks.DynamicLog (dynamicLogWithPP, wrap, xmobarPP, xmobarColor, shorten, PP(..))
-- import XMonad.Hooks.ServerMode
-- import XMonad.Hooks.SetWMName
-- import XMonad.Hooks.WindowSwallowing (swallowEventHook)
-- import XMonad.Hooks.WorkspaceHistory

-- Layouts modifiers
-- import XMonad.Layout.Simplest
-- import XMonad.Layout.SubLayouts
-- import XMonad.Layout.WindowNavigation

-- Utilities
-- import XMonad.Util.Hacks (windowedFullscreenFixEventHook, javaHack, trayerAboveXmobarEventHook, trayAbovePanelEventHook, trayerPaddingXmobarEventHook, trayPaddingXmobarEventHook, trayPaddingEventHook)
-- import XMonad.Util.NamedScratchpad
#+end_src

* VARIABLES
** Default Mod Key
#+begin_src haskell
myModMask :: KeyMask
myModMask = mod4Mask        -- Sets modkey to super/windows key
#+end_src
** Font
#+begin_src haskell
myFont :: String
myFont = "xft:JetBrainsMono Nerd Font Mono:regular:size=10:antialias=true:hinting=true"
#+end_src
** Terminal
#+begin_src haskell
myTerminal :: String
myTerminal = "alacritty"    -- Sets default terminal
#+end_src
** Code Editor
#+begin_src haskell
myEmacs :: String
myEmacs = "emacsclient -c -a 'emacs' "  -- Makes emacs keybindings easier to type

myCode :: String
myCode = "code"  -- Sets emacs as editor

-- myVim :: String
-- myVim = myTerminal ++ " -e vim "    -- Sets vim as editor
#+end_src
** Appearance
#+begin_src haskell
myBorderWidth :: Dimension
myBorderWidth = 2           -- Sets border width for windows

normfgcolor :: String
normfgcolor = xProp "*.normfgcolor"
normbgcolor :: String
normbgcolor = xProp "*.normbgcolor"
selfgcolor :: String
selfgcolor = xProp "*.selfgcolor"
selbgcolor :: String
selbgcolor = xProp "*.selbgcolor"
normbordercolor :: String
normbordercolor = xProp "*.normbordercolor"
selbordercolor :: String
selbordercolor = xProp "*.selbordercolor"
sepcolor :: String
sepcolor = "#5b6268"
accentcolor :: String
accentcolor = xProp "*.accentcolor"
urgcolor :: String
urgcolor = "#da8548"

-- setting colors for tabs layout and tabs sublayout.
myTabTheme = def { fontName            = myFont
                 , activeColor         = selbgcolor
                 , inactiveColor       = normbgcolor
                 , activeBorderColor   = selbordercolor
                 , inactiveBorderColor = normbordercolor
                 , activeTextColor     = selfgcolor
                 , inactiveTextColor   = normfgcolor
                 }

windowCount :: X (Maybe String)
windowCount = gets $ Just . show . length . W.integrate' . W.stack . W.workspace . W.current . windowset
#+end_src
* AUTOSTART
#+begin_src haskell
myStartupHook :: X ()
myStartupHook = do
  spawnOnce "/usr/bin/emacs --daemon &"
  spawnOnce "lxsession &"
  spawnOnce "notify-send 'Xmonad system ready' &"
  spawnOnce "sleep 5 && xmodmap -e 'pointer = 1 2 3 4 5 6 7 8 9 10' &"
  -- setWMName "LG3D"
  -- spawnOnce "trayer --edge top --align right --widthtype percent --transparent true --alpha 0 --tint 0x000000 --width 1.2 --height 22 &"
  -- spawnOnce "nm-applet &"
  -- spawnOnce "volumeicon"
#+end_src
* SCRATCHPADS
#+begin_src haskell :tangle no
-- myScratchPads :: [NamedScratchpad]
-- myScratchPads = [ NS "terminal" spawnTerm findTerm manageTerm
--                 , NS "mocp" spawnMocp findMocp manageMocp
--                 , NS "calculator" spawnCalc findCalc manageCalc
--                 ]
--   where
--     spawnTerm  = myTerminal ++ " -t scratchpad"
--     findTerm   = title =? "scratchpad"
--     manageTerm = customFloating $ W.RationalRect l t w h
--                where
--                  h = 0.9
--                  w = 0.9
--                  t = 0.95 -h
--                  l = 0.95 -w
--     spawnMocp  = myTerminal ++ " -t mocp -e mocp"
--     findMocp   = title =? "mocp"
--     manageMocp = customFloating $ W.RationalRect l t w h
--                where
--                  h = 0.9
--                  w = 0.9
--                  t = 0.95 -h
--                  l = 0.95 -w
--     spawnCalc  = "qalculate-gtk"
--     findCalc   = className =? "Qalculate-gtk"
--     manageCalc = customFloating $ W.RationalRect l t w h
--                where
--                  h = 0.5
--                  w = 0.4
--                  t = 0.75 -h
--                  l = 0.70 -w
#+end_src

* LAYOUTS
#+begin_src haskell
{- Defining a bunch of layouts, many that I don't use. limitWindows n sets
maximum number of windows displayed for layout. mySpacing n sets the gap size
around the windows.
-}
tall     = renamed [Replace "tall"]
           $ limitWindows 5
           $ addTabs shrinkText myTabTheme
           -- $ subLayout [] (smartBorders Simplest)
           $ smartSpacing 4
           $ ResizableTall 1 (3/100) (1/2) []
monocle  = renamed [Replace "monocle"]
           $ addTabs shrinkText myTabTheme
           -- $ subLayout [] (smartBorders Simplest)
           $ Full
floats   = renamed [Replace "floats"]
           $ simplestFloat
thrColMagn = renamed [Replace "3ColMagn"]
           $ magnifiercz 1.3
           $ limitWindows 7
           $ addTabs shrinkText myTabTheme
           -- $ subLayout [] (smartBorders Simplest)
           $ ThreeCol 1 (3/100) (1/2)
thrRowMagn = renamed [Replace "3RowMagn"]
           $ magnifiercz 1.3
           $ limitWindows 7
           $ addTabs shrinkText myTabTheme
           -- $ subLayout [] (smartBorders Simplest)
           $ Mirror
           $ ThreeCol 1 (3/100) (1/2)
tabs     = renamed [Replace "tabs"]
           $ tabbed shrinkText myTabTheme

-- The layout hook
myLayoutHook = avoidStruts
               $ mouseResize
               $ T.toggleLayouts floats
               $ mkToggle (NBFULL ?? NOBORDERS ?? EOT) myDefaultLayout
  where
    myDefaultLayout = smartBorders
                    $ withBorder myBorderWidth
                    $ tall
                    -- $ configurableNavigation noNavigateBorders tall
                    ||| noBorders tabs
                    ||| floats
                    ||| thrColMagn
                    ||| thrRowMagn
                    ||| noBorders monocle
#+end_src
* WORKSPACES
#+begin_src haskell
-- myWorkspaces = [" 1 ", " 2 ", " 3 ", " 4 ", " 5 ", " 6 ", " 7 ", " 8 ", " 9 ", " 10 "]
myWorkspaces = ["Main", "Int", "Str", "Arr", "Imp", "Type", "Mus", "Vid", "Func", "Utl"]
-- myWorkspaces = ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]
-- myWorkspaces = ["一", "二", "三", "四", "五", "六", "7七", "八", "九", "十"]
-- myWorkspaces =
--         " 1 : <fn=2>\xf111</fn> " :
--         " 2 : <fn=2>\xf1db</fn> " :
--         " 3 : <fn=2>\xf192</fn> " :
--         " 4 : <fn=2>\xf025</fn> " :
--         " 5 : <fn=2>\xf03d</fn> " :
--         " 6 : <fn=2>\xf1e3</fn> " :
--         " 7 : <fn=2>\xf07b</fn> " :
--         " 8 : <fn=2>\xf21b</fn> " :
--         " 9 : <fn=2>\xf21e</fn> " :
--         []
myWorkspaceIndices = M.fromList $ zipWith (,) myWorkspaces [1..] -- (,) == \x y -> (x,y)

clickable ws = "<action=xdotool key super+"++show i++">"++ws++"</action>"
    where i = fromJust $ M.lookup ws myWorkspaceIndices
#+end_src

#+RESULTS:

* MANAGEHOOK
#+begin_src haskell
myManageHook :: XMonad.Query (Data.Monoid.Endo WindowSet)
myManageHook = composeAll
  -- 'doFloat' forces a window to float.  Useful for dialog boxes and such.
  -- using 'doShift ( myWorkspaces !! 7)' sends program to workspace 8!
  -- I'm doing it this way because otherwise I would have to write out the full
  -- name of my workspaces and the names would be very long if using clickable workspaces.
  [ className =? "confirm"         --> doFloat
  , className =? "file_progress"   --> doFloat
  , className =? "dialog"          --> doFloat
  , className =? "download"        --> doFloat
  , className =? "error"           --> doFloat
  , className =? "Xfce-polkit"     --> doCenterFloat
  , className =? "notification"    --> doFloat
  , className =? "pinentry-gtk-2"  --> doFloat
  , className =? "splash"          --> doFloat
  , className =? "toolbar"         --> doFloat
  , className =? "Yad"             --> doCenterFloat
  , className =? "Microsoft-edge"  --> doShift ( myWorkspaces !! 1 )
  , (className =? "Microsoft-edge" <&&> resource =? "Dialog") --> doFloat
  , isFullscreen -->  doFullFloat] -- <+> namedScratchpadManageHook myScratchPads
#+end_src
* NAMED ACTIONS
#+begin_src haskell
subtitle' ::  String -> ((KeyMask, KeySym), NamedAction)
subtitle' x = ((0,0), NamedAction $ map toUpper
                      $ sep ++ "\n-- " ++ x ++ " --\n" ++ sep)
  where
    sep = replicate (6 + length x) '-'

showKeybindings :: [((KeyMask, KeySym), NamedAction)] -> NamedAction
showKeybindings x = addName "Show Keybindings" $ io $ do
  h <- spawnPipe $ "yad --text-info --fontname='JetBrainsMono Nerd Font 12' --fore=#46d9ff back=#282c36 --center --geometry=1200x750 --title \"XMonad keybindings\""
  --hPutStr h (unlines $ showKm x) -- showKM adds ">>" before subtitles
  hPutStr h (unlines $ showKmSimple x) -- showKmSimple doesn't add ">>" to subtitles
  hClose h
  return ()
#+end_src

* KEYBINDINGS
#+begin_src haskell
myKeys :: XConfig l0 -> [((KeyMask, KeySym), NamedAction)]
myKeys c =
    --(subtitle "Custom Keys":) $ mkNamedKeymap c $
    let subKeys str ks = subtitle' str : mkNamedKeymap c ks in
    subKeys "Xmonad Essentials"
    [ ("M-C-r", addName "Recompile XMonad"      $ spawn "xmonad --recompile")
    , ("M-S-<F5>", addName "Restart XMonad"     $ spawn "xmonad --restart")
    , ("M-S-q", addName "Quit XMonad"           $ io exitSuccess)
    , ("M-x",   addName "Quit XMonad"           $ spawn "dm-logout")
    , ("M-q",   addName "Kill focused window"   $ kill1)
    , ("M-S-q", addName "Kill all windows on WS"$ killAll)
    , ("M-d",   addName "Run prompt"            $ spawn "dm_run.py")
    , ("M-S-b", addName "Toggle bar show/hide"  $ sendMessage ToggleStruts)
    ]

    ^++^ subKeys "Switch to workspace"
    [ ("M-1", addName "Switch to workspace 1"   $ windows $ W.greedyView $ myWorkspaces !! 0)
    , ("M-2", addName "Switch to workspace 2"   $ windows $ W.greedyView $ myWorkspaces !! 1)
    , ("M-3", addName "Switch to workspace 3"   $ windows $ W.greedyView $ myWorkspaces !! 2)
    , ("M-4", addName "Switch to workspace 4"   $ windows $ W.greedyView $ myWorkspaces !! 3)
    , ("M-5", addName "Switch to workspace 5"   $ windows $ W.greedyView $ myWorkspaces !! 4)
    , ("M-6", addName "Switch to workspace 6"   $ windows $ W.greedyView $ myWorkspaces !! 5)
    , ("M-7", addName "Switch to workspace 7"   $ windows $ W.greedyView $ myWorkspaces !! 6)
    , ("M-8", addName "Switch to workspace 8"   $ windows $ W.greedyView $ myWorkspaces !! 7)
    , ("M-9", addName "Switch to workspace 9"   $ windows $ W.greedyView $ myWorkspaces !! 8)
    , ("M-0", addName "Switch to workspace 10"  $ windows $ W.greedyView $ myWorkspaces !! 9)
    ]

    ^++^ subKeys "Send window to workspace"
    [ ("M-S-1", addName "Send to workspace 1"   $ windows $ W.shift $ myWorkspaces !! 0)
    , ("M-S-2", addName "Send to workspace 2"   $ windows $ W.shift $ myWorkspaces !! 1)
    , ("M-S-3", addName "Send to workspace 3"   $ windows $ W.shift $ myWorkspaces !! 2)
    , ("M-S-4", addName "Send to workspace 4"   $ windows $ W.shift $ myWorkspaces !! 3)
    , ("M-S-5", addName "Send to workspace 5"   $ windows $ W.shift $ myWorkspaces !! 4)
    , ("M-S-6", addName "Send to workspace 6"   $ windows $ W.shift $ myWorkspaces !! 5)
    , ("M-S-7", addName "Send to workspace 7"   $ windows $ W.shift $ myWorkspaces !! 6)
    , ("M-S-8", addName "Send to workspace 8"   $ windows $ W.shift $ myWorkspaces !! 7)
    , ("M-S-9", addName "Send to workspace 9"   $ windows $ W.shift $ myWorkspaces !! 8)
    , ("M-S-0", addName "Send to workspace 10"  $ windows $ W.shift $ myWorkspaces !! 9)
    ]

    ^++^ subKeys "Move window to WS and go there"
    [ ("M-S-<Page_Up>", addName "Move window to next WS"    $ shiftTo Next nonNSP >> moveTo Next nonNSP)
    , ("M-S-<Page_Down>", addName "Move window to prev WS"  $ shiftTo Prev nonNSP >> moveTo Prev nonNSP)
    ]

    ^++^ subKeys "Window navigation"
    [ ("M-j", addName "Move focus to next window"               $ windows W.focusDown)
    , ("M-k", addName "Move focus to prev window"               $ windows W.focusUp)
    , ("M-m", addName "Move focus to master window"             $ windows W.focusMaster)
    , ("M-S-j", addName "Swap focused window with next window"  $ windows W.swapDown)
    , ("M-S-k", addName "Swap focused window with prev window"  $ windows W.swapUp)
    , ("M-S-m", addName "Swap focused window with master window"$ windows W.swapMaster)
    , ("M-<Backspace>", addName "Move focused window to master" $ promote)
    , ("M-S-,", addName "Rotate all windows except master"      $ rotSlavesDown)
    , ("M-S-.", addName "Rotate all windows current stack"      $ rotAllDown)
    ]

    {- | Dmenu scripts (dmscripts)
    In Xmonad and many tiling window managers, M-p is the default keybinding to
    launch dmenu_run, so I've decided to use M-p plus KEY for these dmenu scripts.
    -}
    ^++^ subKeys "Dmenu scripts"
    [ ("M-p h", addName "List all dmscripts"    $ spawn "dm-hub")
    , ("M-p b", addName "Set background"        $ spawn "dm-setbg")
    , ("M-p c", addName "Edit config files"     $ spawn "dm-confedit")
    , ("M-p m", addName "View manpages"         $ spawn "dm-man")
    , ("M-p o", addName "Store and copy notes"  $ spawn "dm-note")
    , ("M-p x", addName "Logout Menu"           $ spawn "dm-logout")
    , ("M-p r", addName "Listen to online radio"$ spawn "dm-radio")
    , ("M-p s", addName "Record Screen"         $ spawn "dm-record")
    , ("M-p w", addName "Search various engines"$ spawn "dm-websearch")
    , ("M-p n", addName "Connect Wifi"          $ spawn "dm-wifi")
    , ("M-p p", addName "Pick Color"            $ spawn "gpick -s")
    , ("M-p z", addName "Open Zotero"           $ spawn "zotero-snap")
    ]

    ^++^ subKeys "Favorite programs"
    [ ("M-<Return>", addName "Launch terminal"  $ spawn myTerminal)
    , ("M-b", addName "Launch web browser"      $ spawn "microsoft-edge")
    , ("M-e", addName "Launch file manager"     $ spawn "thunar")
    , ("M-s", addName "Launch file manager"     $ spawn "flameshot gui")
    , ("M-M1-h", addName "Launch htop"          $ spawn (myTerminal ++ " -e htop"))
    ]

    ^++^ subKeys "Monitors"
    [ ("M-.", addName "Switch focus to next monitor"    $ nextScreen)
    , ("M-,", addName "Switch focus to prev monitor"    $ prevScreen)
    ]

    -- Switch layouts
    ^++^ subKeys "Switch layouts"
    [ ("M-<Tab>", addName "Switch to next layout"   $ sendMessage NextLayout)
    , ("M-f", addName "Toggle noborders/full"       $ sendMessage (MT.Toggle NBFULL) >> sendMessage ToggleStruts)
    ]

    -- Window resizing
    ^++^ subKeys "Window resizing"
    [ ("M-h", addName "Shrink window"               $ sendMessage Shrink)
    , ("M-l", addName "Expand window"               $ sendMessage Expand)
    , ("M-M1-j", addName "Shrink window vertically" $ sendMessage MirrorShrink)
    , ("M-M1-k", addName "Expand window vertically" $ sendMessage MirrorExpand)
    ]

    -- Floating windows
    ^++^ subKeys "Floating windows"
    [ ("M-S-<Space>", addName "Toggle float layout" $ sendMessage (T.Toggle "floats"))
    , ("M-t", addName "Sink a floating window"      $ withFocused $ windows . W.sink)
    , ("M-S-t", addName "Sink all floated windows"  $ sinkAll)
    ]

    -- Increase/decrease spacing (gaps)
    ^++^ subKeys "Window spacing (gaps)"
    [ ("M-g j", addName "Decrease window spacing" $ decWindowSpacing 4)
    , ("M-g k", addName "Increase window spacing" $ incWindowSpacing 4)
    , ("M-g h", addName "Decrease screen spacing" $ decScreenSpacing 4)
    , ("M-g l", addName "Increase screen spacing" $ incScreenSpacing 4)
    ]

    -- Increase/decrease windows in the master pane or the stack
    ^++^ subKeys "Increase/decrease windows in master pane or the stack"
    [ ("M-S-<Up>", addName "Increase clients in master pane"   $ sendMessage (IncMasterN 1))
    , ("M-S-<Down>", addName "Decrease clients in master pane" $ sendMessage (IncMasterN (-1)))
    , ("M-=", addName "Increase max # of windows for layout"   $ increaseLimit)
    , ("M--", addName "Decrease max # of windows for layout"   $ decreaseLimit)
    ]

    {- | Sublayouts
    This is used to push windows to tabbed sublayouts, or pull them out of it.
    -}
    -- ^++^ subKeys "Sublayouts"
    -- [ ("M-C-h", addName "pullGroup L"           $ sendMessage $ pullGroup L)
    -- , ("M-C-l", addName "pullGroup R"           $ sendMessage $ pullGroup R)
    -- , ("M-C-k", addName "pullGroup U"           $ sendMessage $ pullGroup U)
    -- , ("M-C-j", addName "pullGroup D"           $ sendMessage $ pullGroup D)
    -- , ("M-C-m", addName "MergeAll"              $ withFocused (sendMessage . MergeAll))
    -- , ("M-C-u", addName "UnMerge"               $ withFocused (sendMessage . UnMerge))
    -- , ("M-C-/", addName "UnMergeAll"            $ withFocused (sendMessage . UnMergeAll))
    -- , ("M-C-.", addName "Switch focus next tab" $ onGroup W.focusUp')
    -- , ("M-C-,", addName "Switch focus prev tab" $ onGroup W.focusDown')
    -- ]

    {- | Scratchpads
    Toggle show/hide these programs. They run on a hidden workspace.
    When you toggle them to show, it brings them to current workspace.
    Toggle them to hide and it sends them back to hidden workspace (NSP).
    -}
    -- ^++^ subKeys "Scratchpads"
    -- [ ("M-` 1", addName "Toggle scratchpad terminal"   $ namedScratchpadAction myScratchPads "terminal")
    -- , ("M-` 2", addName "Toggle scratchpad mocp"       $ namedScratchpadAction myScratchPads "mocp")
    -- , ("M-` 3", addName "Toggle scratchpad calculator" $ namedScratchpadAction myScratchPads "calculator")
    -- ]

    -- Controls for mocp music player (SUPER-u followed by a key)
    ^++^ subKeys "Mocp music player"
    [ ("M-u p", addName "mocp play"                $ spawn "mocp --play")
    , ("M-u l", addName "mocp next"                $ spawn "mocp --next")
    , ("M-u h", addName "mocp prev"                $ spawn "mocp --previous")
    , ("M-u <Space>", addName "mocp toggle pause"  $ spawn "mocp --toggle-pause")
    ]

    -- Emacs (SUPER-e followed by a key)
    ^++^ subKeys "Code Editor"
    [ ("M-c c", addName "VS Code"                   $ spawn myCode)
    , ("M-c e", addName "Emacsclient"               $ spawn myEmacs)
    , ("M-c a", addName "Emacsclient EMMS (music)"  $ spawn (myEmacs ++ "--eval '(emms)' --eval '(emms-play-directory-tree \"~/Music/\")'"))
    , ("M-c b", addName "Emacsclient Ibuffer"       $ spawn (myEmacs ++ "--eval '(ibuffer)'"))
    , ("M-c d", addName "Emacsclient Dired"         $ spawn (myEmacs ++ "--eval '(dired nil)'"))
    , ("M-c m", addName "Mousepad"                  $ spawn "mousepad")
    ]

    -- Multimedia Keys
    ^++^ subKeys "Multimedia keys"
    [ ("<XF86AudioMute>", addName "Toggle audio mute"   $ spawn "volumecontrol.sh -o m")
    , ("<XF86AudioLowerVolume>", addName "Lower volume" $ spawn "volumecontrol.sh -o d")
    , ("<XF86AudioRaiseVolume>", addName "Raise volume" $ spawn "volumecontrol.sh -o i")
    , ("<XF86MonBrightnessDown>", addName "Raise vol"   $ spawn "brightnesscontrol.sh d")
    , ("<XF86MonBrightnessUp>", addName "Raise vol"     $ spawn "brightnesscontrol.sh i")
    , ("<Print>", addName "Take screenshot"             $ spawn "flameshotgui")
    ]

    -- Workspace
    ^++^ subKeys "Workspace"
    [ ("M1-<Tab>", addName "Cycle with last WS" $ toggleWS) ]

    -- The following lines are needed for named scratchpads.
  where
    nonNSP          = WSIs (return (\ws -> W.tag ws /= "NSP"))
    nonEmptyNonNSP  = WSIs (return (\ws -> isJust (W.stack ws) && W.tag ws /= "NSP"))
#+end_src

* XRESROURCES
#+begin_src haskell
getFromXres :: String -> IO String
getFromXres key = fromMaybe "" . findValue key <$> runProcessWithInput "xrdb" ["-query"] ""
  where
    findValue :: String -> String -> Maybe String
    findValue xresKey xres =
      snd <$> (
                DL.find ((== xresKey) . fst)
                $ catMaybes
                $ splitAtColon
                <$> lines xres
              )

    splitAtColon :: String -> Maybe (String, String)
    splitAtColon str = splitAtTrimming str <$> (DL.elemIndex ':' str)

    splitAtTrimming :: String -> Int -> (String, String)
    splitAtTrimming str idx = bimap trim trim . (second tail) $ splitAt idx str

    trim :: String -> String
    trim = DL.dropWhileEnd (isSpace) . DL.dropWhile (isSpace)

xProp :: String -> String
xProp = unsafePerformIO . getFromXres
#+end_src

* MAIN 💥
#+begin_src haskell
main :: IO ()
main = do
  -- Launching three instances of xmobar on their monitors.
  -- xmproc0 <- spawnPipe ("xmobar -x 0 $HOME/.xmobarrc ")
  xmproc0 <- spawnPipe ("~/.cabal/bin/xmobar -x 0 $HOME/.xmobarrc " ++ "-B" ++ normbgcolor ++ " -F" ++ normfgcolor)
  -- xmproc0 <- spawnPipe ("xmobar -x 0 $HOME/.xmobarrc -B '#555555' -F '#000000'")
  -- the xmonad, ya know...what the WM is named after!
  xmonad $ addDescrKeys' ((mod4Mask, xK_F1), showKeybindings) myKeys $ ewmh $ docks $ def
    { manageHook         = myManageHook <+> manageDocks
    -- , handleEventHook    = windowedFullscreenFixEventHook <> swallowEventHook (className =? "Alacritty"  <||> className =? "st-256color" <||> className =? "XTerm") (return True) <> trayerPaddingXmobarEventHook
    -- , handleEventHook    = windowedFullscreenFixEventHook
    , handleEventHook    = fullscreenEventHook
    , modMask            = myModMask
    , terminal           = myTerminal
    , startupHook        = myStartupHook
    , layoutHook         = myLayoutHook
    , workspaces         = myWorkspaces
    , borderWidth        = myBorderWidth
    , normalBorderColor  = normbordercolor
    , focusedBorderColor = selbordercolor
    -- , logHook = dynamicLogWithPP $  filterOutWsPP [scratchpadWorkspaceTag] $ xmobarPP
    , logHook = dynamicLogWithPP $ xmobarPP
        { ppOutput = \x -> hPutStrLn xmproc0 x   -- xmobar on monitor 1
        , ppCurrent = xmobarColor normfgcolor "" . wrap "[" "]"
          -- Visible but not current workspace
        , ppVisible = xmobarColor selfgcolor "" . clickable
          -- Hidden workspace
        -- , ppHidden = xmobarColor selbgcolor "" . wrap "*" "" . clickable
        , ppHidden = xmobarColor accentcolor "" . wrap "*" "" . clickable
          -- Hidden workspaces (no windows)
        -- , ppHiddenNoWindows = xmobarColor selbgcolor "" . clickable
          -- Title of active window
        , ppTitle = xmobarColor normfgcolor "" . wrap " " "" . shorten 60
          -- Separator character
        , ppSep =  "<fc=" ++ sepcolor ++ "> <fn=1>|</fn> </fc>"
          -- Urgent workspace
        , ppUrgent = xmobarColor urgcolor "" . wrap "!" "!"
          -- Adding # of windows on current workspace to the bar
        , ppExtras  = [windowCount]
          -- order of things in xmobar
        , ppOrder  = \(ws:l:t:ex) -> [ws,l]++ex++[t]
        }
    }
#+end_src

#+RESULTS:
