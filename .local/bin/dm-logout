#!/usr/bin/env bash
#
# Script name: dm-logout
# Description: Logout, shutdown, reboot or lock screen.
# Dependencies: dmenu, fzf, rofi, systemd, slock, notify-send
# GitLab: https://www.gitlab.com/dwt1/dmscripts
# License: https://www.gitlab.com/dwt1/dmscripts/LICENSE
# Contributors: Derek Taylor,
#               Simon Ingelsson

# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
ffplay -nodisp -autoexit /home/fqs/.config/sounds/menu-01.mp3 &
set -euo pipefail
echo "passed 1"
_path="$(cd "$(dirname "${BASH_SOURCE[0]}")" && cd "$(dirname "$(readlink "${BASH_SOURCE[0]}" || echo ".")")" && pwd)"
if [[ -f "${_path}/_dm-helper.sh" ]]; then
    # shellcheck disable=SC1090,SC1091
    source "${_path}/_dm-helper.sh"
else
    # shellcheck disable=SC1090
    echo "No helper-script found"
fi

echo "passed 2"
# script will not hit this if there is no config-file to load
# shellcheck disable=SC1090
source "$(get_config)"

echo "passed 3"
# Check if config has updates that should be displayed to the user
# check_updated_config

echo "passed 4"
# use notify-send if run in dumb term
# TODO: add abillity to control from config.
_out="echo"
if [[ ${TERM} == 'dumb' ]]; then
    _out="notify-send"
fi

output() {
    ${_out} "dm-logout" "$@"
}

main() {
    # An array of options to choose.
    declare -a options=(
        "Lock screen"
        "Logout"
        "Reboot"
        "Shutdown"
        "Suspend"
        "Quit"
    )

    # look up what managers are used (makes it more dynamic)
    declare -a MANAGERS
    while IFS= read -r manager; do
        MANAGERS+=("${manager,,}")
    done < <(grep-desktop)
    # Original code, used as a refrence and as backup
    # done < <(grep 'Name=' /usr/share/xsessions/*.desktop | cut -d'=' -f2)
    MANAGERS+=("xmonad-x86_64-linux")
    # Piping the above array into dmenu, fzf or rofi.
    # We use "printf '%s\n'" to format the array one item to a line.
    choice=$(printf '%s\n' "${options[@]}" | ${MENU} 'Shutdown menu:' "${@}")

    # What to do when/if we choose one of the options.
    case $choice in
    'Logout')
        if [[ "$(echo -e "No\nYes" | ${MENU} "${choice}?" "${@}")" == "Yes" ]]; then
            pkill dwm & pkill i3 &
            ffplay -nodisp -autoexit /home/fqs/.config/dtos-sounds/shutdown-03.mp3 &
            # for manager in "${MANAGERS[@]}"; do
            #     loginctl terminate-user "$USER"
            # done
        else
            output "User chose not to logout." && exit 1
        fi
        ;;
    'Lock screen')
        # shellcheck disable=SC2154
        ${logout_locker}
        ;;
    'Reboot')
        if [[ "$(echo -e "No\nYes" | ${MENU} "${choice}?" "${@}")" == "Yes" ]]; then
            ffplay -nodisp -autoexit /home/fqs/.config/dtos-sounds/shutdown-01.mp3 &
            systemctl reboot
        else
            output "User chose not to reboot." && exit 0
        fi
        ;;
    'Shutdown')
        if [[ "$(echo -e "No\nYes" | ${MENU} "${choice}?" "${@}")" == "Yes" ]]; then
            ffplay -nodisp -autoexit /home/fqs/.config/dtos-sounds/shutdown-01.mp3 &
            systemctl poweroff
        else
            output "User chose not to shutdown." && exit 0
        fi
        ;;
    'Suspend')
        if [[ "$(echo -e "No\nYes" | ${MENU} "${choice}?" "${@}")" == "Yes" ]]; then
            ffplay -nodisp -autoexit /home/fqs/.config/dtos-sounds/shutdown-01.mp3 &
            systemctl suspend
        else
            output "User chose not to suspend." && exit 0
        fi
        ;;
    'Quit')
        output "Program terminated." && exit 0
        ;;
    # It is a common practice to use the wildcard asterisk symbol (*) as a final
    # pattern to define the default case. This pattern will always match.
    *)
        exit 0
        ;;
    esac

}

noOpt=1
# If script is run with '-d', it will use 'dmenu'
# If script is run with '-f', it will use 'fzf'
# If script is run with '-d', it will use 'rofi'
while getopts "dfrh" arg 2>/dev/null; do
    case "${arg}" in
    d) # shellcheck disable=SC2153
        MENU=${DMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main
        ;;
    f) # shellcheck disable=SC2153
        MENU=${FMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main
        ;;
    r) # shellcheck disable=SC2153
        MENU=${RMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "@"
        ;;
    h) help ;;
    *) printf '%s\n' "Error: invalid option" "Type $(basename "$0") -h for help" ;;
    esac
    noOpt=0
done

# If script is run with NO argument, it will use 'dmenu'
[ $noOpt = 1 ] && MENU=${DMENU} && [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
