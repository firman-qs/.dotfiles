#!/usr/bin/env bash
#
# Script name: dm-hub
# Description: A hub allowing you to execute all the other dmscripts.
# Dependencies: dmenu, fzf, rofi
# GitLab: https://www.gitlab.com/dwt1/dmscripts
# License: https://www.gitlab.com/dwt1/dmscripts/LICENSE
# Contributors: n-e0
#               Simon Ingelsson
#               Derek Taylor

# Set with the flags "-e", "-u","-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

_path=$(dirname "$(realpath "$0")")
[[ ! -f "${_path}/_dm-helper.sh" ]] && echo "No helper-script found"
# shellcheck disable=SC1090,SC1091
source "${_path}/_dm-helper.sh"

# script will not hit this if there is no config-file to load
# shellcheck disable=SC1090
source "$(get_config)"

# Check if config has updates that should be displayed to the user
# check_updated_config

function maindmenu() {
    local _self
    declare -A _scripts

    _self=$(basename "$0")

    while IFS= read -r -d '' script; do
        # Every 'dmscript' should contain a line that begins with "# Description: ".
        # Let's take that description and add it next to the script name in the dmenu.
        script_name=$(echo "$(basename "${script}") $(grep '^# Description: ' "${script}")" | sed 's/# Description: /- /g')
        [[ "${script_name}" == "${_self}" ]] && continue
        _scripts[${script_name}]="${script}"
    done < <(find "${_path}" -type f -regex ".*/dm-.*" -print0)

    choice=$(printf '%s\n' "${!_scripts[@]}" | sort | grep ".*dm.*" | ${DMENU} 'Run Script:' "$@")

    if [ "${choice}" ]; then
        thecommand="$(printf '%s' "${_scripts["${choice}"]}" | awk '{print $1}')"
        bash "$thecommand" -d "$@"
    else
        echo "Program terminated." && exit 0
    fi
}

function mainfzf() {
    local _self
    declare -A _scripts

    _self=$(basename "$0")

    while IFS= read -r -d '' script; do
        # Every 'dmscript' should contain a line that begins with "# Description: ".
        # Let's take that description and add it next to the script name in the dmenu.
        script_name=$(echo "$(basename "${script}") $(grep '^# Description: ' "${script}")" | sed 's/# Description: /- /g')
        [[ "${script_name}" == "${_self}" ]] && continue
        _scripts[${script_name}]="${script}"
    done < <(find "${_path}" -type f -regex ".*/dm-.*" -print0)

    choice=$(printf '%s\n' "${!_scripts[@]}" | sort | grep ".*dm.*" | ${FMENU} 'Run Script:')

    if [ "${choice}" ]; then
        thecommand="$(printf '%s' "${_scripts["${choice}"]}" | awk '{print $1}')"
        bash "$thecommand" -f
    else
        echo "Program terminated." && exit 0
    fi
}

function mainrofi() {
    local _self
    declare -A _scripts

    _self=$(basename "$0")

    while IFS= read -r -d '' script; do
        # Every 'dmscript' should contain a line that begins with "# Description: ".
        # Let's take that description and add it next to the script name in the dmenu.
        script_name=$(echo "$(basename "${script}") $(grep '^# Description: ' "${script}")" | sed 's/# Description: /- /g')
        [[ "${script_name}" == "${_self}" ]] && continue
        _scripts[${script_name}]="${script}"
    done < <(find "${_path}" -type f -regex ".*/dm-.*" -print0)

    choice=$(printf '%s\n' "${!_scripts[@]}" | sort | grep ".*dm.*" | ${RMENU} 'Run Script:' "$@")

    if [ "${choice}" ]; then
        thecommand="$(printf '%s' "${_scripts["${choice}"]}" | awk '{print $1}')"
        bash "$thecommand" -r "$@"
    else
        echo "Program terminated." && exit 0
    fi
}

noOpt=1
# If script is run with '-d', it will use 'dmenu'
# If script is run with '-f', it will use 'fzf'
# If script is run with '-d', it will use 'rofi'
while getopts "dfrh" arg 2>/dev/null; do
    case "${arg}" in
    d) [[ "${BASH_SOURCE[0]}" == "${0}" ]] && maindmenu ;;
    f) [[ "${BASH_SOURCE[0]}" == "${0}" ]] && mainfzf ;;
    r) [[ "${BASH_SOURCE[0]}" == "${0}" ]] && mainrofi "$@" ;;
    h) help ;;
    *) printf '%s\n' "Error: invalid option" "Type $(basename "$0") -h for help" ;;
    esac
    noOpt=0
done

# If script is run with NO argument, it will use 'dmenu'
[ $noOpt = 1 ] && [[ "${BASH_SOURCE[0]}" == "${0}" ]] && maindmenu "$@"
