#!/usr/bin/env bash

# Script name: dm-record
# Description: Dmenu script to record video,audio,webcam.
# Dependencies: dmenu, ffmpeg, pulseaudio, alsa, slop (for recording a specific area)
# GitLab: https://www.gitlab.com/dwt1/dmscripts
# License: https://www.gitlab.com/dwt1/dmscripts/LICENSE
# Contributors: ashincoder
#               HostGrady
#               Derek Taylor

# Usage:
# `$0`: Ask for recording type via dmenu
# `$0 screencast`: Record both audio and screen
# `$0 video`: Record only screen
# `$0 audio`: Record only audio
# `$0 kill`: Kill existing recording
#
# If there is already a running instance, user will be prompted to end it.

# Set with the flags "-e", "-o pipefail" cause the script to fail
# if certain things happen, which is a good thing.  Otherwise, we can
# get hidden bugs that are hard to discover.
set -euo pipefail

_path=$(dirname "$(realpath "$0")")
[[ ! -f "${_path}/_dm-helper.sh" ]] && echo "No helper-script found"
# shellcheck disable=SC1090,SC1091
source "${_path}/_dm-helper.sh"

# script will not hit this if there is no config-file to load
# shellcheck disable=SC1090
source "$(get_config)"

# Check if config has updates that should be displayed to the user
# check_updated_config

killrecording() {
    recpid="$(cat /tmp/recordingpid)"
    # kill with SIGTERM, allowing finishing touches.
    kill -15 "$recpid"
    rm -f /tmp/recordingpid
    pkill -RTMIN+9 "${STATUSBAR:-dwmblocks}"
    # even after SIGTERM, ffmpeg may still run, so SIGKILL it.
    sleep 3
    kill -9 "$recpid"
    exit
}

# -s "$(xdpyinfo | grep dimensions | awk '{print $2;}')" \
screencast() {
    ffmpeg -y \
        -f x11grab \
        -framerate 60 \
        -s "$(xdpyinfo | awk '/dimensions/ {print $2;}')" \
        -i "$DISPLAY" \
        -f pulse -i default \
        -r 30 \
        -c:v h264 -crf 0 -preset ultrafast -c:a aac \
        "$HOME/screencast-$(date '+%y%m%d-%H%M-%S').mp4" &
    echo $! >/tmp/recordingpid
}

video() {
    ffmpeg \
        -f x11grab \
        -s "$(xdpyinfo | awk '/dimensions/ {print $2;}')" \
        -i "$DISPLAY" \
        -c:v libx264 -qp 0 -r 30 \
        "$HOME/video-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! >/tmp/recordingpid
}

webcamhidef() {
    ffmpeg \
        -f v4l2 \
        -i /dev/video0 \
        -video_size 1920x1080 \
        "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! >/tmp/recordingpid
}

webcam() {
    ffmpeg \
        -f v4l2 \
        -i /dev/video0 \
        -video_size 640x480 \
        "$HOME/webcam-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! >/tmp/recordingpid
}

audio() {
    ffmpeg \
        -f alsa -i default \
        -c:a flac \
        "$HOME/audio-$(date '+%y%m%d-%H%M-%S').flac" &
    echo $! >/tmp/recordingpid
}

# the dmenu portions of this script are broken
# TODO: deprecate or rewrite

askrecording() {
    choice="$(printf "screencast\\nvideo\\nvideo selected\\naudio\\nwebcam\\nwebcam (hi-def)" | ${MENU} "Select recording style:")"

    case "$choice" in
    screencast) screencast ;;
    audio) audio ;;
    video) video ;;
    *selected) videoselected ;;
    webcam) webcam ;;
    "webcam (hi-def)") webcamhidef ;;
    esac
}

asktoend() {
    response=$(printf "No\\nYes" | ${MENU} "Recording still active. End recording?") \
        && [ "$response" = "Yes" ] && killrecording
}

videoselected() {
    slop -f "%x %y %w %h" >/tmp/slop
    read -r X Y W H </tmp/slop
    rm /tmp/slop

    ffmpeg \
        -f x11grab \
        -framerate 60 \
        -video_size "$W"x"$H" \
        -i :0.0+"$X,$Y" \
        -c:v libx264 -qp 0 -r 30 \
        "$HOME/box-$(date '+%y%m%d-%H%M-%S').mkv" &
    echo $! >/tmp/recordingpid
}

main() {
    arg="${1:-none}"
    case "$arg" in
    screencast) screencast ;;
    audio) audio ;;
    video) video ;;
    *selected) videoselected ;;
    kill) killrecording ;;
    *) ([ -f /tmp/recordingpid ] && asktoend && exit) || askrecording ;;
    esac
}

noOpt=1
# If script is run with '-d', it will use 'dmenu'
# If script is run with '-f', it will use 'fzf'
# If script is run with '-d', it will use 'rofi'
while getopts "dfrh" arg 2>/dev/null; do
    case "${arg}" in
    d) # shellcheck disable=SC2153
        MENU=${DMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main
        ;;
    f) # shellcheck disable=SC2153
        MENU=${FMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main
        ;;
    r) # shellcheck disable=SC2153
        MENU=${RMENU}
        [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "@"
        ;;
    h) help ;;
    *) printf '%s\n' "Error: invalid option" "Type $(basename "$0") -h for help" ;;
    esac
    noOpt=0
done

# If script is run with NO argument, it will use 'dmenu'
[ $noOpt = 1 ] && MENU=${DMENU} && [[ "${BASH_SOURCE[0]}" == "${0}" ]] && main "$@"
